//Detta program fungerar som ett filsöknings program.
//Man kan importera filer från datorn, sätta taggar på filerna, söka efter taggar och öppna markerad fil.
import java.awt.Desktop;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;

import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.OverrunStyle;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.StrokeType;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

public class Main extends Application {

	//Har initieras Listor och GUI element som ska användas i denna klassens metoder
	private static ArrayList<FileLink> fileLink = new ArrayList<FileLink>();
	private static VBox display = new VBox(5);
	private static VBox tagDisplay = new VBox(10);
	private static String activeFileID;
	private static ArrayList<String> activeTags = new ArrayList<String>();
	private static int displayRow = 0;

	public static void main(String[] args) {
		launch(args);
	}

	//Här skapas filen "data" (om den inte redan finns) i denna filen sparas all länkar och taggar till de importerade filer. 
	//Allt detta gör så att man inte måste mata in en ny filväg varje gång man söker och istbara söka igenom alla mappar i "data"
	static {
		try {
			if(Files.notExists(Paths.get("data")))
				Files.createDirectory(Paths.get("data"));
			for(Object entry : Files.list(Paths.get("data")).toArray()) {
				fileLink.add(new FileLink(Paths.get(entry.toString()).toString()));
				if(fileLink.get(fileLink.size() - 1).getFileID() == null)
					fileLink.remove(fileLink.size() - 1);
			}
		}
		catch(Exception e) {
			System.out.println(e);
		}
	}

	public void start(Stage window) {

		//Här skapas element som används för att välja och byta språk på programmet
		HBox Language = new HBox();
		Language.setSpacing(40);
		Language.setLayoutX(16);
		Language.setLayoutY(10);
		Scene scLanguage = new Scene(Language, 180, 40);
		scLanguage.setFill(Color.gray(0.96));
		Button svLanguage = new Button("Svenska");
		Button enLanguage = new Button("English");
		Button setLanguage = new Button("");
		setLanguage.setPrefSize(100, 25);
		Language.getChildren().addAll(svLanguage, enLanguage);
		window.setScene(scLanguage);
		window.setTitle("Select Language");
		window.show();

		//Här initieras main scenen där all funktioner ligger. 
		Group foundation = new Group();
		Scene scene = new Scene(foundation, 600, 400);
		scene.setFill(Color.STEELBLUE);
		window.setResizable(false);
		window.setOnCloseRequest(Event -> {
			System.exit(0);
		});

		//Den här VBoxen är en lista med alla filer som programmet hittat när det sökte
		display.setAlignment(Pos.TOP_CENTER);
		display.setLayoutX(25);
		display.setLayoutY(25);
		foundation.getChildren().add(display);

		//Den här VBoxen ska hålla alla taggar som man valt att söka efter
		tagDisplay.setAlignment(Pos.CENTER);
		tagDisplay.setLayoutX(300);
		tagDisplay.setLayoutY(25);
		foundation.getChildren().add(tagDisplay);

		//Den här VBoxen ska hålla alla knappar och funktioner som prgrammet har
		VBox functions = new VBox();
		functions.setCenterShape(false);
		functions.setLayoutX(500);
		functions.setLayoutY(10);
		functions.setSpacing(10);
		foundation.getChildren().add(functions);

		//Denna knappen tar en tillbaka till sida 0 och ändrar så att man inte sökt efter en tagg
		Button home = new Button("Home");
		home.setPrefSize(100, 25);
		functions.getChildren().add(home);
		home.setOnAction(Event -> {
			this.resetResults();
			this.refreshDisplay();
		});

		//Den här knappen startar utförskaren där man väljer en fil att importera till programmet.
		//Den importerade filen sparars i en fil med ett slumpäsigt 8 siffrifgt namn tillsammans med en txt fil som innehåller taggarna för filen
		Button importFile = new Button("Import File");
		importFile.setPrefSize(100, 25);
		functions.getChildren().add(importFile);
		importFile.setOnAction(Event -> {
			this.importFile(new FileChooser().showOpenDialog(null));
			this.refreshDisplay();
		});

		//Den här knappen lägger till en tagg på den markerade filen.
		//Den läggs i en VBox tillsammans med medhörande textfield så att det ser snyggare ut
		VBox tagWriter = new VBox();
		tagWriter.setAlignment(Pos.CENTER);
		TextField tagInput = new TextField();
		tagInput.setAlignment(Pos.CENTER);
		tagInput.setMinSize(100, 25);
		tagInput.setMaxSize(100, 25);
		Button addTag = new Button("Add tag:");
		tagInput.setOnKeyPressed(Event -> { //Den är metoden testar om man trycker "enter" och har knappen markerad detta gör det enklare att trycka på knappen
			if(Event.getCode() == KeyCode.ENTER)
				addTag.fire();
		}); 
		addTag.setPrefSize(100, 25);
		addTag.setAlignment(Pos.CENTER);
		addTag.setOnAction(Event -> {
			if(tagInput != null)
				if(!tagInput.equals(""))
					if(activeFileID != null)
						this.addTag(tagInput.getText());
			tagInput.setText("");
		});
		tagWriter.getChildren().addAll(addTag, tagInput);
		functions.getChildren().add(tagWriter);

		//Den här knappen söker efter en tagg och visar resultaten i fönstret
		//Den läggs i en VBox tillsammans med medhörande textfield så att det ser snyggare ut
		VBox tagSearcher = new VBox();
		tagSearcher.setAlignment(Pos.CENTER);
		TextField searchInput = new TextField();
		searchInput.setAlignment(Pos.CENTER);
		searchInput.setMinSize(100, 25);
		searchInput.setMaxSize(100, 25);
		Button searchTag = new Button("Search tag:");
		searchInput.setOnKeyPressed(Event -> {
			if(Event.getCode() == KeyCode.ENTER)
				searchTag.fire();
		});
		searchTag.setPrefSize(100, 25);
		searchTag.setAlignment(Pos.CENTER);
		searchTag.setOnAction(Event -> {
			if(searchInput != null)
				if(!searchInput.equals(""))
					this.addSearch(searchInput.getText());
			searchInput.setText("");
		});
		tagSearcher.getChildren().addAll(searchTag, searchInput);
		functions.getChildren().add(tagSearcher);

		//Denna knappen öppnar den markerade filen
		Button open = new Button("Open");
		open.setPrefSize(100, 25);
		open.setAlignment(Pos.CENTER);
		open.setOnAction(Event -> {
			try {
				if(activeFileID != null)
					this.runFile();
			}
			catch(Exception e) {
				System.out.println(e);
			}
		});
		functions.getChildren().add(open);

		//		Den här knappen öppnar ett fönster som visar taggar för den markerade filen
		//		Man kan genom detta fönster ta bort taggar för filen
		Button editTags = new Button("Edit tags");
		editTags.setPrefSize(100, 25);
		editTags.setAlignment(Pos.CENTER);
		editTags.setOnAction(Event -> {
			try {
				if(activeFileID != null)
					this.editTags();
			}
			catch(Exception e) {
				System.out.println(e);
			}
		});
		functions.getChildren().add(editTags);

		//		Den här knappen tar bort markerad fil från mappen data så att den inte dycker upp i programmet
		//		Eftersom vi använder länkar till filen och inte flyttar filen så tas inte orginal filen bort från datorn
		Button removeLink = new Button("Remove link");
		removeLink.setPrefSize(100, 25);
		removeLink.setAlignment(Pos.CENTER);
		removeLink.setOnAction(Event -> {
			try {
				if(activeFileID != null)
					this.removeLink();
			}
			catch(Exception e) {
				System.out.println(e);
			}
		});
		functions.getChildren().add(removeLink);

		//		De här knapparna gör så att man kan ändra mellan olika sidor, detta hjälper om man importerar fler filer än vad som får plats i fönstret
		//		De läggs i en HBox tillsammans med en Label som visar sidnummer. Detta för att det ska se snyggare ut
		Label displayRowCount = new Label(Integer.toString(displayRow));
		displayRowCount.setAlignment(Pos.CENTER);
		displayRowCount.setPrefSize(25, 25);
		HBox scrollView = new HBox(10);
		scrollView.setAlignment(Pos.CENTER);
		Button scrollLeft = new Button("<-"); //Den här knappen ändrar sidnummer med ett och scrollar åt vänster
		scrollLeft.setAlignment(Pos.CENTER);
		scrollLeft.setPrefSize(50, 25);
		scrollLeft.setOnAction(Event -> {
			try {
				if(displayRow > 0)
					displayRow--;
				displayRowCount.setText(Integer.toString(displayRow));
				this.refreshDisplay();
			}
			catch(Exception e) {
				System.out.println(e);
			}
		}); //Den här knappen ändrar sidnummer med ett och scrollar åt höger
		Button scrollRight = new Button("->");
		scrollRight.setAlignment(Pos.CENTER);
		scrollRight.setPrefSize(50, 25);
		scrollRight.setOnAction(Event -> {
			try {
				if(displayRow < Math.ceil((double) (display.getChildren().size() / 10.0)))
					displayRow++;
				displayRowCount.setText(Integer.toString(displayRow));
				this.refreshDisplay();
			}
			catch(Exception e) {
				System.out.println(e);
			}
		});
		scrollView.getChildren().addAll(scrollLeft, displayRowCount, scrollRight);
		scrollView.setLayoutX(227.5);
		scrollView.setLayoutY(365);
		foundation.getChildren().add(scrollView);

		this.refreshDisplay();

		//		Den här funktionen anropas av knappen i början. Den ändrar all text (förutom filnamn) i programmet till Svenska
		svLanguage.setOnAction(Event ->{
			setLanguage.setText("Ändra Språk");
			importFile.setText("Importera Fil");
			home.setText("Hem");
			addTag.setText("Sätt tagg:");
			searchTag.setText("Sök tagg:");
			open.setText("Öppna");
			editTags.setText("Ändra taggar");
			removeLink.setText("Ta bort länk");
			window.setTitle("FileDump!");
			window.setScene(scene);
			window.centerOnScreen();
		});

		//		Den här funktionen anropas av knappen i början. Den ändrar all text (förutom filnamn) i programmet till Engelska
		enLanguage.setOnAction(Event ->{
			setLanguage.setText("Change Language");
			importFile.setText("Import File");
			home.setText("Home");
			addTag.setText("Add tag:");
			searchTag.setText("Search tag:");
			open.setText("Open");
			editTags.setText("Edit tags");
			removeLink.setText("Remove link");
			window.setTitle("FileDump!");
			window.setScene(scene);
			window.centerOnScreen();
		});

		//		Den här knappen gör så att man kan ändra språk när man har programmet startat.
		functions.getChildren().add(setLanguage);
		setLanguage.setOnAction(Event ->
		{
			window.setTitle("Select Language");
			window.setScene(scLanguage);
			window.centerOnScreen();
		});

	}

	private void refreshDisplay() {
		try {
			display.getChildren().clear();
			if(fileLink.size() > 0) {
				StackPane[] displayStack = new StackPane[fileLink.size()];
				Label[] displayName = new Label[fileLink.size()];
				Rectangle[] displayFrame = new Rectangle[fileLink.size()];
				int entryNum = 0;
				for(int i = 0; i < fileLink.size(); i++) {
					final int j = i;

					displayStack[j] = new StackPane();
					displayStack[j].setAlignment(Pos.CENTER);

					displayName[j] = new Label(fileLink.get(j).getFileID());
					displayName[j].setAlignment(Pos.CENTER);
					displayName[j].setMaxWidth(250);
					displayName[j].setTextOverrun(OverrunStyle.ELLIPSIS);

					displayFrame[j] = new Rectangle(250, 20, Color.ALICEBLUE);
					displayFrame[j].setStroke(Color.BLACK);
					if(activeFileID != null)
						if(fileLink.get(j).getFileID().equals(activeFileID))
							displayFrame[j].setFill(Color.DODGERBLUE);

					displayStack[j].setOnMouseClicked(Event -> {
						for(Rectangle display : displayFrame)
							display.setFill(Color.ALICEBLUE);
						displayFrame[j].setFill(Color.DODGERBLUE);
						activeFileID = fileLink.get(j).getFileID();
					});

					displayStack[j].getChildren().addAll(displayFrame[j], displayName[j]);

					if(fileLink.get(j).isValid()) {
						if(entryNum >= displayRow * 10 && entryNum < (displayRow + 1) * 10)
							display.getChildren().add(displayStack[j]);
						entryNum++;
					}
				}
			}

			tagDisplay.getChildren().clear();
			if(activeTags.size() > 0) {
				StackPane[] tagStack = new StackPane[activeTags.size()];
				Label[] tagName = new Label[activeTags.size()];
				Rectangle[] tagFrame = new Rectangle[activeTags.size()];
				for(int i = 0; i < activeTags.size(); i++) {
					final int j = i;

					tagStack[j] = new StackPane();
					tagStack[j].setAlignment(Pos.CENTER);

					tagName[j] = new Label(activeTags.get(j));
					tagName[j].setAlignment(Pos.CENTER);
					tagName[j].setMaxWidth(75);
					tagName[j].setTextOverrun(OverrunStyle.ELLIPSIS);

					tagFrame[j] = new Rectangle(75, 20, Color.ALICEBLUE);
					tagFrame[j].setStroke(Color.BLACK);
					tagStack[j].setOnMouseClicked(Event -> {
						activeTags.remove(j);
						this.refreshSearch();
						this.refreshDisplay();
					});

					tagStack[j].getChildren().addAll(tagFrame[j], tagName[j]);

					tagDisplay.getChildren().add(tagStack[j]);
				}
			}
		}
		catch(Exception e) {
			System.out.println(e);
		}
	}

	private void runFile() {
		try {
			String linkLoc = null;
			for(FileLink entry : fileLink)
				if(entry.getFileID().equals(activeFileID)) {
					linkLoc = entry.getLinkLoc().toAbsolutePath().toString();
					break;
				}
			if(Desktop.isDesktopSupported())
				Desktop.getDesktop().open(new File(linkLoc));
		}
		catch(Exception e) {
			System.out.println(e);
		}
	}

	private void resetResults() {
		try {
			activeTags.clear();
			for(FileLink entry : fileLink)
				entry.setValid(true);
			this.refreshDisplay();
		}
		catch(Exception e) {
			System.out.println(e);
		}
	}

	private void removeLink() {
		try {
			for(int i = 0; i < fileLink.size(); i++)
				if(fileLink.get(i).getFileID().equals(activeFileID)) {
					Files.delete(fileLink.get(i).getLinkLoc());
					Files.delete(fileLink.get(i).getTagLoc());
					Files.delete(fileLink.get(i).getDirLoc());
					fileLink.remove(i);
					activeFileID = null;
					this.refreshDisplay();
				}
		}
		catch(Exception e) {
			System.out.println(e);
		}
	}

	private void editTags() {
		try {
			for(FileLink target : fileLink)
				if(target.getFileID().equals(activeFileID)) {
					Stage tagWindow = new Stage();
					tagWindow.setTitle(target.getFileID());
					this.refreshTagWindow(tagWindow, target);
					tagWindow.show();
					tagWindow.setResizable(false);
					this.refreshTagWindow(tagWindow, target);
					tagWindow.setOnCloseRequest(Event -> {
						tagWindow.close();
					});
				}
		}
		catch(Exception e) {
			System.out.println(e);
		}
	}

	private void refreshTagWindow(Stage plane, FileLink target) {
		try {
			GridPane tagBase = new GridPane();
			Scene tagScene = new Scene(tagBase, 225, 250);
			plane.setScene(tagScene);
			tagScene.setFill(Color.STEELBLUE);
			if(target.getTags().size() > 0) {
				StackPane[] tagStack = new StackPane[target.getTags().size()];
				Label[] tagName = new Label[target.getTags().size()];
				Rectangle[] tagFrame = new Rectangle[target.getTags().size()];
				for(int i = 0; i < target.getTags().size(); i++) {
					final int j = i;

					tagStack[j] = new StackPane();
					tagStack[j].setAlignment(Pos.CENTER);

					tagName[j] = new Label(target.getTags().get(j));
					tagName[j].setAlignment(Pos.CENTER);
					tagName[j].setMaxWidth(75);
					tagName[j].setTextOverrun(OverrunStyle.ELLIPSIS);

					tagFrame[j] = new Rectangle(75, 25, Color.ALICEBLUE);
					tagFrame[j].setStroke(Color.BLACK);
					tagFrame[j].setStrokeType(StrokeType.INSIDE);
					tagStack[j].setOnMouseClicked(Event -> {
						target.removeTag(tagName[j].getText());
						this.refreshTagWindow(plane, target);
						this.refreshDisplay();
					});

					tagStack[j].getChildren().addAll(tagFrame[j], tagName[j]);

					tagBase.add(tagStack[j], j / 10, j % 10);
				}
			}
		}
		catch(Exception e) {
			System.out.println(e);
		}
	}

	private void refreshSearch() {
		try {
			for(FileLink entry : fileLink) {
				entry.setValid(true);
				for(String search : activeTags) {
					boolean valid = false;
					for(String stored : entry.getTags())
						if(search.equals(stored))
							valid = true;
					if(!valid)
						entry.setValid(false);
				}
			}
			this.refreshDisplay();
		}
		catch(Exception e) {
			System.out.println(e);
		}
	}

	private void addTag(String tag) {
		try {
			for(FileLink entry : fileLink)
				if(entry.getFileID().equals(activeFileID)) {
					entry.addTag(tag);
					this.refreshDisplay();
					break;
				}
		}
		catch(Exception e) {
			System.out.println(e);
		}
	}

	private void addSearch(String tag) {
		try {
			if(activeTags.size() > 0 && activeTags.size() < 10) {
				boolean exists = false;
				for(String stored : activeTags)
					if(tag.equals(stored))
						exists = true;
				if(!exists) {
					activeTags.add(tag);
					this.refreshSearch();
				}
			}
			else if(activeTags.size() == 0) {
				activeTags.add(tag);
				this.refreshSearch();
			}
		}
		catch(Exception e) {
			System.out.println(e);
		}
	}

	private void importFile(File target) {
		try {
			if(target != null) {
				boolean exists = false;
				if(fileLink.size() > 0)
					for(FileLink entry : fileLink)
						if(entry.getFileID().equals(target.getName()))
							exists = true;
				if(!exists) {
					String dirURI;
					while(true) {
						dirURI = "data\\" + Integer.toString((int) (Math.random() * Math.pow(10, 8)));
						if(Files.notExists(Paths.get(dirURI)))
							break;
					}
					Files.createDirectory(Paths.get(dirURI));
					Files.createLink(Paths.get(dirURI + "\\" + target.getName()), target.toPath());
					Files.createFile(Paths.get(dirURI + "\\tags.txt"));
					fileLink.add(new FileLink(dirURI));
				}
			}
		}
		catch(Exception e) {
			System.out.println(e);
		}
	}

}
